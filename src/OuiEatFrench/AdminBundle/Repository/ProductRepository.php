<?php

namespace OuiEatFrench\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
* RegisterRepository
* This class was generated by the Doctrine ORM. Add your own custom
* repository methods below.
*/
class ProductRepository extends EntityRepository
{
    public function findAllProductBySeason($season)
    {
        $q = $this->createQueryBuilder('a')
            ->select ('a')
            ->join('a.season','u')
            ->where('u.name = :name')
            ->setParameter('name', $season)
            ->getQuery();

        return $q->getResult();
    }

    public function findAllProductByCalories($calories)
    {
        $q = $this->createQueryBuilder('a')
            ->select ('a')
            ->where('a.calories <= :calories')
            ->setParameter('calories', $calories)
            ->getQuery();

        return $q->getResult();
    }

    public function findProductAndChildProduct($productId)
    {
        $q = $this->createQueryBuilder('product')
            ->select ('product')
            ->leftJoin('product.parentProduct', 'parent')
            ->where('product.id = :productId OR parent.id = :productId')
            ->setParameter('productId', $productId)
            ->getQuery();

        return $q->getResult();
    }

    public function findByParentNullAndLimitPage($page, $limit, $filters)
    {
        $implode = implode($filters, ',');

        $q = $this->createQueryBuilder('p')
            ->select ('p')
            ->where('p.parentProduct IS NULL');
            if ($implode != '')
            {
                $q->andWhere("p.id IN (:filters)")->setParameter('filters', $filters);
            }
            $q->setFirstResult(($page - 1)*$limit)
            ->setMaxResults($limit);

        return $q->getQuery()->getResult();
    }

    public function findByParentNull($filters)
    {
        $implode = implode($filters, ',');

        $q = $this->createQueryBuilder('p')
            ->select ('p')
            ->where('p.parentProduct IS NULL');
            if ($implode != '')
            {
                $q->andWhere("p.id IN (:filters)")->setParameter('filters', $filters);
            }

        return $q->getQuery()->getResult();
    }
}
