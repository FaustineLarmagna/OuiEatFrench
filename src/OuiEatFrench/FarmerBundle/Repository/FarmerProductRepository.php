<?php

namespace OuiEatFrench\FarmerBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
* RegisterRepository
* This class was generated by the Doctrine ORM. Add your own custom
* repository methods below.
*/
class FarmerProductRepository extends EntityRepository
{
    public function findFarmerProductByFilters($productBaseId, $productId, $companyPostCode, $maxPrice)
    {
        $q = $this->createQueryBuilder('fp')
            ->select ('fp')
            ->join('fp.product','p')
            ->join('fp.farmer','f')
            ->where('p.id LIKE :productId')
            ->andWhere('fp.unitPrice <= :maxPrice')
            ->andWhere('p.id = :productBaseId OR p.parentProduct = :productBaseId')
            ->andWhere('f.companyPostcode LIKE :companyPostCode')
            ->andWhere('f.holidaysCheckbox NOT LIKE :true')
            ->andWhere('fp.unitQuantity >= fp.unitMinimum')
            ->setParameters(array(
                'productBaseId'     => $productBaseId,
                'productId'         => $productId,
                'companyPostCode'   => $companyPostCode.'%',
                'maxPrice'          => $maxPrice,
                'true'              => 1
            ))
            ->getQuery();

        return $q->getResult();
    }

    public function findFarmerProductByFiltersWithLimit($productBaseId, $productId, $companyPostCode, $maxPrice, $page, $limit)
    {
        $q = $this->createQueryBuilder('fp')
            ->select ('fp')
            ->join('fp.product','p')
            ->join('fp.farmer','f')
            ->where('p.id LIKE :productId')
            ->andWhere('fp.unitPrice <= :maxPrice')
            ->andWhere('p.id = :productBaseId OR p.parentProduct = :productBaseId')
            ->andWhere('f.companyPostcode LIKE :companyPostCode')
            ->andWhere('f.holidaysCheckbox NOT LIKE :true')
            ->andWhere('fp.unitQuantity >= fp.unitMinimum')
            ->setParameters(array(
                'productBaseId'     => $productBaseId,
                'productId'         => $productId,
                'companyPostCode'   => $companyPostCode.'%',
                'maxPrice'          => $maxPrice,
                'true'              => 1
            ))
            ->setFirstResult(($page - 1)*$limit)
            ->setMaxResults($limit)
            ->getQuery();

        return $q->getResult();
    }
}
